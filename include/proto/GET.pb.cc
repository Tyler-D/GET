// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GET.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GET.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GET {

namespace {

const ::google::protobuf::Descriptor* TaskParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskParam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TaskParam_DataPosition_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TaskParam_TaskType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AddParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* MulParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MulParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConvParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConvParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* PoolParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PoolParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* LRNParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LRNParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReLUParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReLUParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* SigmoidParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SigmoidParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GET_2eproto() {
  protobuf_AddDesc_GET_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GET.proto");
  GOOGLE_CHECK(file != NULL);
  TaskParam_descriptor_ = file->message_type(0);
  static const int TaskParam_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskParam, source_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskParam, sourcef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskParam, sourcem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskParam, result_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskParam, resultf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskParam, resultm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskParam, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskParam, add_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskParam, sub_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskParam, mul_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskParam, conv_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskParam, pool_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskParam, lrn_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskParam, relu_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskParam, sigmoid_param_),
  };
  TaskParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskParam_descriptor_,
      TaskParam::default_instance_,
      TaskParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskParam));
  TaskParam_DataPosition_descriptor_ = TaskParam_descriptor_->enum_type(0);
  TaskParam_TaskType_descriptor_ = TaskParam_descriptor_->enum_type(1);
  AddParam_descriptor_ = file->message_type(1);
  static const int AddParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddParam, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddParam, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddParam, channels_),
  };
  AddParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddParam_descriptor_,
      AddParam::default_instance_,
      AddParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddParam));
  SubParam_descriptor_ = file->message_type(2);
  static const int SubParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubParam, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubParam, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubParam, channels_),
  };
  SubParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubParam_descriptor_,
      SubParam::default_instance_,
      SubParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubParam));
  MulParam_descriptor_ = file->message_type(3);
  static const int MulParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MulParam, m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MulParam, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MulParam, n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MulParam, channels_),
  };
  MulParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MulParam_descriptor_,
      MulParam::default_instance_,
      MulParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MulParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MulParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MulParam));
  ConvParam_descriptor_ = file->message_type(4);
  static const int ConvParam_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvParam, data_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvParam, data_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvParam, filter_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvParam, filter_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvParam, stride_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvParam, stride_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvParam, pad_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvParam, pad_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvParam, channels_),
  };
  ConvParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConvParam_descriptor_,
      ConvParam::default_instance_,
      ConvParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConvParam));
  PoolParam_descriptor_ = file->message_type(5);
  static const int PoolParam_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolParam, data_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolParam, data_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolParam, kernel_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolParam, kernel_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolParam, stride_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolParam, stride_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolParam, pad_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolParam, pad_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolParam, channels_),
  };
  PoolParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PoolParam_descriptor_,
      PoolParam::default_instance_,
      PoolParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PoolParam));
  LRNParam_descriptor_ = file->message_type(6);
  static const int LRNParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParam, channels_),
  };
  LRNParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LRNParam_descriptor_,
      LRNParam::default_instance_,
      LRNParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LRNParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LRNParam));
  ReLUParam_descriptor_ = file->message_type(7);
  static const int ReLUParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParam, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParam, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParam, channels_),
  };
  ReLUParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReLUParam_descriptor_,
      ReLUParam::default_instance_,
      ReLUParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReLUParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReLUParam));
  SigmoidParam_descriptor_ = file->message_type(8);
  static const int SigmoidParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidParam, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidParam, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidParam, channels_),
  };
  SigmoidParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SigmoidParam_descriptor_,
      SigmoidParam::default_instance_,
      SigmoidParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SigmoidParam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GET_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskParam_descriptor_, &TaskParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddParam_descriptor_, &AddParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubParam_descriptor_, &SubParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MulParam_descriptor_, &MulParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConvParam_descriptor_, &ConvParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PoolParam_descriptor_, &PoolParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LRNParam_descriptor_, &LRNParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReLUParam_descriptor_, &ReLUParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SigmoidParam_descriptor_, &SigmoidParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GET_2eproto() {
  delete TaskParam::default_instance_;
  delete TaskParam_reflection_;
  delete AddParam::default_instance_;
  delete AddParam_reflection_;
  delete SubParam::default_instance_;
  delete SubParam_reflection_;
  delete MulParam::default_instance_;
  delete MulParam_reflection_;
  delete ConvParam::default_instance_;
  delete ConvParam_reflection_;
  delete PoolParam::default_instance_;
  delete PoolParam_reflection_;
  delete LRNParam::default_instance_;
  delete LRNParam_reflection_;
  delete ReLUParam::default_instance_;
  delete ReLUParam_reflection_;
  delete SigmoidParam::default_instance_;
  delete SigmoidParam_reflection_;
}

void protobuf_AddDesc_GET_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tGET.proto\022\003GET\"\226\005\n\tTaskParam\0228\n\nsource"
    "_pos\030\001 \001(\0162\033.GET.TaskParam.DataPosition:"
    "\007HOSTMEM\022\017\n\007sourcef\030\002 \003(\t\022\017\n\007sourcem\030\003 \003"
    "(\004\0228\n\nresult_pos\030\004 \001(\0162\033.GET.TaskParam.D"
    "ataPosition:\007HOSTMEM\022\017\n\007resultf\030\005 \003(\t\022\017\n"
    "\007resultm\030\006 \003(\004\022%\n\004type\030\007 \001(\0162\027.GET.TaskP"
    "aram.TaskType\022 \n\tadd_param\030\010 \001(\0132\r.GET.A"
    "ddParam\022 \n\tsub_param\030\t \001(\0132\r.GET.SubPara"
    "m\022 \n\tmul_param\030\n \001(\0132\r.GET.MulParam\022\"\n\nc"
    "onv_param\030\013 \001(\0132\016.GET.ConvParam\022\"\n\npool_"
    "param\030\014 \001(\0132\016.GET.PoolParam\022 \n\tlrn_param"
    "\030\r \001(\0132\r.GET.LRNParam\022\"\n\nrelu_param\030\016 \001("
    "\0132\016.GET.ReLUParam\022(\n\rsigmoid_param\030\017 \001(\013"
    "2\021.GET.SigmoidParam\"%\n\014DataPosition\022\010\n\004F"
    "ILE\020\000\022\013\n\007HOSTMEM\020\001\"e\n\010TaskType\022\007\n\003ADD\020\000\022"
    "\007\n\003SUB\020\001\022\t\n\005MULTI\020\002\022\017\n\013CONVOLUTION\020\003\022\013\n\007"
    "POOLING\020\004\022\007\n\003LRN\020\005\022\010\n\004RELU\020\006\022\013\n\007Sigmoid\020"
    "\007\">\n\010AddParam\022\016\n\006height\030\001 \001(\005\022\r\n\005width\030\002"
    " \001(\005\022\023\n\010channels\030\003 \001(\005:\0011\">\n\010SubParam\022\016\n"
    "\006height\030\001 \001(\005\022\r\n\005width\030\002 \001(\005\022\023\n\010channels"
    "\030\003 \001(\005:\0011\"@\n\010MulParam\022\t\n\001M\030\001 \001(\005\022\t\n\001K\030\002 "
    "\001(\005\022\t\n\001N\030\003 \001(\005\022\023\n\010channels\030\004 \001(\005:\0011\"\262\001\n\t"
    "ConvParam\022\016\n\006data_h\030\001 \001(\005\022\016\n\006data_w\030\002 \001("
    "\005\022\020\n\010filter_h\030\003 \001(\005\022\020\n\010filter_w\030\004 \001(\005\022\023\n"
    "\010stride_h\030\005 \001(\005:\0011\022\023\n\010stride_w\030\006 \001(\005:\0011\022"
    "\020\n\005pad_h\030\007 \001(\005:\0010\022\020\n\005pad_w\030\010 \001(\005:\0010\022\023\n\010c"
    "hannels\030\t \001(\005:\0011\"\262\001\n\tPoolParam\022\016\n\006data_h"
    "\030\001 \001(\005\022\016\n\006data_w\030\002 \001(\005\022\020\n\010kernel_h\030\003 \001(\005"
    "\022\020\n\010kernel_w\030\004 \001(\005\022\023\n\010stride_h\030\005 \001(\005:\0011\022"
    "\023\n\010stride_w\030\006 \001(\005:\0011\022\020\n\005pad_h\030\007 \001(\005:\0010\022\020"
    "\n\005pad_w\030\010 \001(\005:\0010\022\023\n\010channels\030\t \001(\005:\0011\"\037\n"
    "\010LRNParam\022\023\n\010channels\030\001 \001(\005:\0010\"B\n\tReLUPa"
    "ram\022\021\n\006height\030\001 \001(\005:\0011\022\r\n\005width\030\002 \001(\005\022\023\n"
    "\010channels\030\003 \001(\005:\0011\"E\n\014SigmoidParam\022\021\n\006he"
    "ight\030\001 \001(\005:\0011\022\r\n\005width\030\002 \001(\005\022\023\n\010channels"
    "\030\003 \001(\005:\0011", 1409);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GET.proto", &protobuf_RegisterTypes);
  TaskParam::default_instance_ = new TaskParam();
  AddParam::default_instance_ = new AddParam();
  SubParam::default_instance_ = new SubParam();
  MulParam::default_instance_ = new MulParam();
  ConvParam::default_instance_ = new ConvParam();
  PoolParam::default_instance_ = new PoolParam();
  LRNParam::default_instance_ = new LRNParam();
  ReLUParam::default_instance_ = new ReLUParam();
  SigmoidParam::default_instance_ = new SigmoidParam();
  TaskParam::default_instance_->InitAsDefaultInstance();
  AddParam::default_instance_->InitAsDefaultInstance();
  SubParam::default_instance_->InitAsDefaultInstance();
  MulParam::default_instance_->InitAsDefaultInstance();
  ConvParam::default_instance_->InitAsDefaultInstance();
  PoolParam::default_instance_->InitAsDefaultInstance();
  LRNParam::default_instance_->InitAsDefaultInstance();
  ReLUParam::default_instance_->InitAsDefaultInstance();
  SigmoidParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GET_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GET_2eproto {
  StaticDescriptorInitializer_GET_2eproto() {
    protobuf_AddDesc_GET_2eproto();
  }
} static_descriptor_initializer_GET_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* TaskParam_DataPosition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskParam_DataPosition_descriptor_;
}
bool TaskParam_DataPosition_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TaskParam_DataPosition TaskParam::FILE;
const TaskParam_DataPosition TaskParam::HOSTMEM;
const TaskParam_DataPosition TaskParam::DataPosition_MIN;
const TaskParam_DataPosition TaskParam::DataPosition_MAX;
const int TaskParam::DataPosition_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* TaskParam_TaskType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskParam_TaskType_descriptor_;
}
bool TaskParam_TaskType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TaskParam_TaskType TaskParam::ADD;
const TaskParam_TaskType TaskParam::SUB;
const TaskParam_TaskType TaskParam::MULTI;
const TaskParam_TaskType TaskParam::CONVOLUTION;
const TaskParam_TaskType TaskParam::POOLING;
const TaskParam_TaskType TaskParam::LRN;
const TaskParam_TaskType TaskParam::RELU;
const TaskParam_TaskType TaskParam::Sigmoid;
const TaskParam_TaskType TaskParam::TaskType_MIN;
const TaskParam_TaskType TaskParam::TaskType_MAX;
const int TaskParam::TaskType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TaskParam::kSourcePosFieldNumber;
const int TaskParam::kSourcefFieldNumber;
const int TaskParam::kSourcemFieldNumber;
const int TaskParam::kResultPosFieldNumber;
const int TaskParam::kResultfFieldNumber;
const int TaskParam::kResultmFieldNumber;
const int TaskParam::kTypeFieldNumber;
const int TaskParam::kAddParamFieldNumber;
const int TaskParam::kSubParamFieldNumber;
const int TaskParam::kMulParamFieldNumber;
const int TaskParam::kConvParamFieldNumber;
const int TaskParam::kPoolParamFieldNumber;
const int TaskParam::kLrnParamFieldNumber;
const int TaskParam::kReluParamFieldNumber;
const int TaskParam::kSigmoidParamFieldNumber;
#endif  // !_MSC_VER

TaskParam::TaskParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskParam::InitAsDefaultInstance() {
  add_param_ = const_cast< ::GET::AddParam*>(&::GET::AddParam::default_instance());
  sub_param_ = const_cast< ::GET::SubParam*>(&::GET::SubParam::default_instance());
  mul_param_ = const_cast< ::GET::MulParam*>(&::GET::MulParam::default_instance());
  conv_param_ = const_cast< ::GET::ConvParam*>(&::GET::ConvParam::default_instance());
  pool_param_ = const_cast< ::GET::PoolParam*>(&::GET::PoolParam::default_instance());
  lrn_param_ = const_cast< ::GET::LRNParam*>(&::GET::LRNParam::default_instance());
  relu_param_ = const_cast< ::GET::ReLUParam*>(&::GET::ReLUParam::default_instance());
  sigmoid_param_ = const_cast< ::GET::SigmoidParam*>(&::GET::SigmoidParam::default_instance());
}

TaskParam::TaskParam(const TaskParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskParam::SharedCtor() {
  _cached_size_ = 0;
  source_pos_ = 1;
  result_pos_ = 1;
  type_ = 0;
  add_param_ = NULL;
  sub_param_ = NULL;
  mul_param_ = NULL;
  conv_param_ = NULL;
  pool_param_ = NULL;
  lrn_param_ = NULL;
  relu_param_ = NULL;
  sigmoid_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskParam::~TaskParam() {
  SharedDtor();
}

void TaskParam::SharedDtor() {
  if (this != default_instance_) {
    delete add_param_;
    delete sub_param_;
    delete mul_param_;
    delete conv_param_;
    delete pool_param_;
    delete lrn_param_;
    delete relu_param_;
    delete sigmoid_param_;
  }
}

void TaskParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskParam_descriptor_;
}

const TaskParam& TaskParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GET_2eproto();
  return *default_instance_;
}

TaskParam* TaskParam::default_instance_ = NULL;

TaskParam* TaskParam::New() const {
  return new TaskParam;
}

void TaskParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_pos_ = 1;
    result_pos_ = 1;
    type_ = 0;
    if (has_add_param()) {
      if (add_param_ != NULL) add_param_->::GET::AddParam::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_sub_param()) {
      if (sub_param_ != NULL) sub_param_->::GET::SubParam::Clear();
    }
    if (has_mul_param()) {
      if (mul_param_ != NULL) mul_param_->::GET::MulParam::Clear();
    }
    if (has_conv_param()) {
      if (conv_param_ != NULL) conv_param_->::GET::ConvParam::Clear();
    }
    if (has_pool_param()) {
      if (pool_param_ != NULL) pool_param_->::GET::PoolParam::Clear();
    }
    if (has_lrn_param()) {
      if (lrn_param_ != NULL) lrn_param_->::GET::LRNParam::Clear();
    }
    if (has_relu_param()) {
      if (relu_param_ != NULL) relu_param_->::GET::ReLUParam::Clear();
    }
    if (has_sigmoid_param()) {
      if (sigmoid_param_ != NULL) sigmoid_param_->::GET::SigmoidParam::Clear();
    }
  }
  sourcef_.Clear();
  sourcem_.Clear();
  resultf_.Clear();
  resultm_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GET.TaskParam.DataPosition source_pos = 1 [default = HOSTMEM];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GET::TaskParam_DataPosition_IsValid(value)) {
            set_source_pos(static_cast< ::GET::TaskParam_DataPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sourcef;
        break;
      }

      // repeated string sourcef = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sourcef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sourcef()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sourcef(this->sourcef_size() - 1).data(),
            this->sourcef(this->sourcef_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sourcef;
        if (input->ExpectTag(24)) goto parse_sourcem;
        break;
      }

      // repeated uint64 sourcem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sourcem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_sourcem())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_sourcem())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sourcem;
        if (input->ExpectTag(32)) goto parse_result_pos;
        break;
      }

      // optional .GET.TaskParam.DataPosition result_pos = 4 [default = HOSTMEM];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result_pos:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GET::TaskParam_DataPosition_IsValid(value)) {
            set_result_pos(static_cast< ::GET::TaskParam_DataPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_resultf;
        break;
      }

      // repeated string resultf = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resultf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_resultf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resultf(this->resultf_size() - 1).data(),
            this->resultf(this->resultf_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_resultf;
        if (input->ExpectTag(48)) goto parse_resultm;
        break;
      }

      // repeated uint64 resultm = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resultm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48, input, this->mutable_resultm())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_resultm())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_resultm;
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional .GET.TaskParam.TaskType type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GET::TaskParam_TaskType_IsValid(value)) {
            set_type(static_cast< ::GET::TaskParam_TaskType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_add_param;
        break;
      }

      // optional .GET.AddParam add_param = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_sub_param;
        break;
      }

      // optional .GET.SubParam sub_param = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sub_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sub_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_mul_param;
        break;
      }

      // optional .GET.MulParam mul_param = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mul_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mul_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_conv_param;
        break;
      }

      // optional .GET.ConvParam conv_param = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conv_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conv_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_pool_param;
        break;
      }

      // optional .GET.PoolParam pool_param = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pool_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pool_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_lrn_param;
        break;
      }

      // optional .GET.LRNParam lrn_param = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lrn_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lrn_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_relu_param;
        break;
      }

      // optional .GET.ReLUParam relu_param = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relu_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relu_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_sigmoid_param;
        break;
      }

      // optional .GET.SigmoidParam sigmoid_param = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sigmoid_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sigmoid_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GET.TaskParam.DataPosition source_pos = 1 [default = HOSTMEM];
  if (has_source_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->source_pos(), output);
  }

  // repeated string sourcef = 2;
  for (int i = 0; i < this->sourcef_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->sourcef(i).data(), this->sourcef(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sourcef(i), output);
  }

  // repeated uint64 sourcem = 3;
  for (int i = 0; i < this->sourcem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->sourcem(i), output);
  }

  // optional .GET.TaskParam.DataPosition result_pos = 4 [default = HOSTMEM];
  if (has_result_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result_pos(), output);
  }

  // repeated string resultf = 5;
  for (int i = 0; i < this->resultf_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->resultf(i).data(), this->resultf(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->resultf(i), output);
  }

  // repeated uint64 resultm = 6;
  for (int i = 0; i < this->resultm_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      6, this->resultm(i), output);
  }

  // optional .GET.TaskParam.TaskType type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }

  // optional .GET.AddParam add_param = 8;
  if (has_add_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->add_param(), output);
  }

  // optional .GET.SubParam sub_param = 9;
  if (has_sub_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->sub_param(), output);
  }

  // optional .GET.MulParam mul_param = 10;
  if (has_mul_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->mul_param(), output);
  }

  // optional .GET.ConvParam conv_param = 11;
  if (has_conv_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->conv_param(), output);
  }

  // optional .GET.PoolParam pool_param = 12;
  if (has_pool_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->pool_param(), output);
  }

  // optional .GET.LRNParam lrn_param = 13;
  if (has_lrn_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->lrn_param(), output);
  }

  // optional .GET.ReLUParam relu_param = 14;
  if (has_relu_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->relu_param(), output);
  }

  // optional .GET.SigmoidParam sigmoid_param = 15;
  if (has_sigmoid_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->sigmoid_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GET.TaskParam.DataPosition source_pos = 1 [default = HOSTMEM];
  if (has_source_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->source_pos(), target);
  }

  // repeated string sourcef = 2;
  for (int i = 0; i < this->sourcef_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourcef(i).data(), this->sourcef(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->sourcef(i), target);
  }

  // repeated uint64 sourcem = 3;
  for (int i = 0; i < this->sourcem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->sourcem(i), target);
  }

  // optional .GET.TaskParam.DataPosition result_pos = 4 [default = HOSTMEM];
  if (has_result_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result_pos(), target);
  }

  // repeated string resultf = 5;
  for (int i = 0; i < this->resultf_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resultf(i).data(), this->resultf(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->resultf(i), target);
  }

  // repeated uint64 resultm = 6;
  for (int i = 0; i < this->resultm_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(6, this->resultm(i), target);
  }

  // optional .GET.TaskParam.TaskType type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(), target);
  }

  // optional .GET.AddParam add_param = 8;
  if (has_add_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->add_param(), target);
  }

  // optional .GET.SubParam sub_param = 9;
  if (has_sub_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->sub_param(), target);
  }

  // optional .GET.MulParam mul_param = 10;
  if (has_mul_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->mul_param(), target);
  }

  // optional .GET.ConvParam conv_param = 11;
  if (has_conv_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->conv_param(), target);
  }

  // optional .GET.PoolParam pool_param = 12;
  if (has_pool_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->pool_param(), target);
  }

  // optional .GET.LRNParam lrn_param = 13;
  if (has_lrn_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->lrn_param(), target);
  }

  // optional .GET.ReLUParam relu_param = 14;
  if (has_relu_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->relu_param(), target);
  }

  // optional .GET.SigmoidParam sigmoid_param = 15;
  if (has_sigmoid_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->sigmoid_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GET.TaskParam.DataPosition source_pos = 1 [default = HOSTMEM];
    if (has_source_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source_pos());
    }

    // optional .GET.TaskParam.DataPosition result_pos = 4 [default = HOSTMEM];
    if (has_result_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_pos());
    }

    // optional .GET.TaskParam.TaskType type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .GET.AddParam add_param = 8;
    if (has_add_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->add_param());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .GET.SubParam sub_param = 9;
    if (has_sub_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sub_param());
    }

    // optional .GET.MulParam mul_param = 10;
    if (has_mul_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mul_param());
    }

    // optional .GET.ConvParam conv_param = 11;
    if (has_conv_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conv_param());
    }

    // optional .GET.PoolParam pool_param = 12;
    if (has_pool_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pool_param());
    }

    // optional .GET.LRNParam lrn_param = 13;
    if (has_lrn_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lrn_param());
    }

    // optional .GET.ReLUParam relu_param = 14;
    if (has_relu_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->relu_param());
    }

    // optional .GET.SigmoidParam sigmoid_param = 15;
    if (has_sigmoid_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sigmoid_param());
    }

  }
  // repeated string sourcef = 2;
  total_size += 1 * this->sourcef_size();
  for (int i = 0; i < this->sourcef_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sourcef(i));
  }

  // repeated uint64 sourcem = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->sourcem_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->sourcem(i));
    }
    total_size += 1 * this->sourcem_size() + data_size;
  }

  // repeated string resultf = 5;
  total_size += 1 * this->resultf_size();
  for (int i = 0; i < this->resultf_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->resultf(i));
  }

  // repeated uint64 resultm = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->resultm_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->resultm(i));
    }
    total_size += 1 * this->resultm_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskParam::MergeFrom(const TaskParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  sourcef_.MergeFrom(from.sourcef_);
  sourcem_.MergeFrom(from.sourcem_);
  resultf_.MergeFrom(from.resultf_);
  resultm_.MergeFrom(from.resultm_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_pos()) {
      set_source_pos(from.source_pos());
    }
    if (from.has_result_pos()) {
      set_result_pos(from.result_pos());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_add_param()) {
      mutable_add_param()->::GET::AddParam::MergeFrom(from.add_param());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sub_param()) {
      mutable_sub_param()->::GET::SubParam::MergeFrom(from.sub_param());
    }
    if (from.has_mul_param()) {
      mutable_mul_param()->::GET::MulParam::MergeFrom(from.mul_param());
    }
    if (from.has_conv_param()) {
      mutable_conv_param()->::GET::ConvParam::MergeFrom(from.conv_param());
    }
    if (from.has_pool_param()) {
      mutable_pool_param()->::GET::PoolParam::MergeFrom(from.pool_param());
    }
    if (from.has_lrn_param()) {
      mutable_lrn_param()->::GET::LRNParam::MergeFrom(from.lrn_param());
    }
    if (from.has_relu_param()) {
      mutable_relu_param()->::GET::ReLUParam::MergeFrom(from.relu_param());
    }
    if (from.has_sigmoid_param()) {
      mutable_sigmoid_param()->::GET::SigmoidParam::MergeFrom(from.sigmoid_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskParam::CopyFrom(const TaskParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskParam::IsInitialized() const {

  return true;
}

void TaskParam::Swap(TaskParam* other) {
  if (other != this) {
    std::swap(source_pos_, other->source_pos_);
    sourcef_.Swap(&other->sourcef_);
    sourcem_.Swap(&other->sourcem_);
    std::swap(result_pos_, other->result_pos_);
    resultf_.Swap(&other->resultf_);
    resultm_.Swap(&other->resultm_);
    std::swap(type_, other->type_);
    std::swap(add_param_, other->add_param_);
    std::swap(sub_param_, other->sub_param_);
    std::swap(mul_param_, other->mul_param_);
    std::swap(conv_param_, other->conv_param_);
    std::swap(pool_param_, other->pool_param_);
    std::swap(lrn_param_, other->lrn_param_);
    std::swap(relu_param_, other->relu_param_);
    std::swap(sigmoid_param_, other->sigmoid_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskParam_descriptor_;
  metadata.reflection = TaskParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddParam::kHeightFieldNumber;
const int AddParam::kWidthFieldNumber;
const int AddParam::kChannelsFieldNumber;
#endif  // !_MSC_VER

AddParam::AddParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddParam::InitAsDefaultInstance() {
}

AddParam::AddParam(const AddParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddParam::SharedCtor() {
  _cached_size_ = 0;
  height_ = 0;
  width_ = 0;
  channels_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddParam::~AddParam() {
  SharedDtor();
}

void AddParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddParam_descriptor_;
}

const AddParam& AddParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GET_2eproto();
  return *default_instance_;
}

AddParam* AddParam::default_instance_ = NULL;

AddParam* AddParam::New() const {
  return new AddParam;
}

void AddParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    height_ = 0;
    width_ = 0;
    channels_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 height = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // optional int32 width = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channels;
        break;
      }

      // optional int32 channels = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 height = 1;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->height(), output);
  }

  // optional int32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 channels = 3 [default = 1];
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channels(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 height = 1;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->height(), target);
  }

  // optional int32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional int32 channels = 3 [default = 1];
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channels(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 height = 1;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 channels = 3 [default = 1];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddParam::MergeFrom(const AddParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddParam::CopyFrom(const AddParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddParam::IsInitialized() const {

  return true;
}

void AddParam::Swap(AddParam* other) {
  if (other != this) {
    std::swap(height_, other->height_);
    std::swap(width_, other->width_);
    std::swap(channels_, other->channels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddParam_descriptor_;
  metadata.reflection = AddParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubParam::kHeightFieldNumber;
const int SubParam::kWidthFieldNumber;
const int SubParam::kChannelsFieldNumber;
#endif  // !_MSC_VER

SubParam::SubParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubParam::InitAsDefaultInstance() {
}

SubParam::SubParam(const SubParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubParam::SharedCtor() {
  _cached_size_ = 0;
  height_ = 0;
  width_ = 0;
  channels_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubParam::~SubParam() {
  SharedDtor();
}

void SubParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubParam_descriptor_;
}

const SubParam& SubParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GET_2eproto();
  return *default_instance_;
}

SubParam* SubParam::default_instance_ = NULL;

SubParam* SubParam::New() const {
  return new SubParam;
}

void SubParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    height_ = 0;
    width_ = 0;
    channels_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 height = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // optional int32 width = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channels;
        break;
      }

      // optional int32 channels = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 height = 1;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->height(), output);
  }

  // optional int32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 channels = 3 [default = 1];
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channels(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 height = 1;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->height(), target);
  }

  // optional int32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional int32 channels = 3 [default = 1];
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channels(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 height = 1;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 channels = 3 [default = 1];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubParam::MergeFrom(const SubParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubParam::CopyFrom(const SubParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubParam::IsInitialized() const {

  return true;
}

void SubParam::Swap(SubParam* other) {
  if (other != this) {
    std::swap(height_, other->height_);
    std::swap(width_, other->width_);
    std::swap(channels_, other->channels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubParam_descriptor_;
  metadata.reflection = SubParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MulParam::kMFieldNumber;
const int MulParam::kKFieldNumber;
const int MulParam::kNFieldNumber;
const int MulParam::kChannelsFieldNumber;
#endif  // !_MSC_VER

MulParam::MulParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MulParam::InitAsDefaultInstance() {
}

MulParam::MulParam(const MulParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MulParam::SharedCtor() {
  _cached_size_ = 0;
  m_ = 0;
  k_ = 0;
  n_ = 0;
  channels_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MulParam::~MulParam() {
  SharedDtor();
}

void MulParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MulParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MulParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MulParam_descriptor_;
}

const MulParam& MulParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GET_2eproto();
  return *default_instance_;
}

MulParam* MulParam::default_instance_ = NULL;

MulParam* MulParam::New() const {
  return new MulParam;
}

void MulParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ = 0;
    k_ = 0;
    n_ = 0;
    channels_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MulParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 M = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_)));
          set_has_m();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_K;
        break;
      }

      // optional int32 K = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_K:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &k_)));
          set_has_k();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_N;
        break;
      }

      // optional int32 N = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_N:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_)));
          set_has_n();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_channels;
        break;
      }

      // optional int32 channels = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MulParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 M = 1;
  if (has_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m(), output);
  }

  // optional int32 K = 2;
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->k(), output);
  }

  // optional int32 N = 3;
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->n(), output);
  }

  // optional int32 channels = 4 [default = 1];
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->channels(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MulParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 M = 1;
  if (has_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m(), target);
  }

  // optional int32 K = 2;
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->k(), target);
  }

  // optional int32 N = 3;
  if (has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->n(), target);
  }

  // optional int32 channels = 4 [default = 1];
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->channels(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MulParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 M = 1;
    if (has_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m());
    }

    // optional int32 K = 2;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->k());
    }

    // optional int32 N = 3;
    if (has_n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->n());
    }

    // optional int32 channels = 4 [default = 1];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MulParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MulParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MulParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MulParam::MergeFrom(const MulParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m()) {
      set_m(from.m());
    }
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_n()) {
      set_n(from.n());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MulParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MulParam::CopyFrom(const MulParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MulParam::IsInitialized() const {

  return true;
}

void MulParam::Swap(MulParam* other) {
  if (other != this) {
    std::swap(m_, other->m_);
    std::swap(k_, other->k_);
    std::swap(n_, other->n_);
    std::swap(channels_, other->channels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MulParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MulParam_descriptor_;
  metadata.reflection = MulParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConvParam::kDataHFieldNumber;
const int ConvParam::kDataWFieldNumber;
const int ConvParam::kFilterHFieldNumber;
const int ConvParam::kFilterWFieldNumber;
const int ConvParam::kStrideHFieldNumber;
const int ConvParam::kStrideWFieldNumber;
const int ConvParam::kPadHFieldNumber;
const int ConvParam::kPadWFieldNumber;
const int ConvParam::kChannelsFieldNumber;
#endif  // !_MSC_VER

ConvParam::ConvParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConvParam::InitAsDefaultInstance() {
}

ConvParam::ConvParam(const ConvParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConvParam::SharedCtor() {
  _cached_size_ = 0;
  data_h_ = 0;
  data_w_ = 0;
  filter_h_ = 0;
  filter_w_ = 0;
  stride_h_ = 1;
  stride_w_ = 1;
  pad_h_ = 0;
  pad_w_ = 0;
  channels_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConvParam::~ConvParam() {
  SharedDtor();
}

void ConvParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConvParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvParam_descriptor_;
}

const ConvParam& ConvParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GET_2eproto();
  return *default_instance_;
}

ConvParam* ConvParam::default_instance_ = NULL;

ConvParam* ConvParam::New() const {
  return new ConvParam;
}

void ConvParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_h_ = 0;
    data_w_ = 0;
    filter_h_ = 0;
    filter_w_ = 0;
    stride_h_ = 1;
    stride_w_ = 1;
    pad_h_ = 0;
    pad_w_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    channels_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConvParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 data_h = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_h_)));
          set_has_data_h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_data_w;
        break;
      }

      // optional int32 data_w = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_w_)));
          set_has_data_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_filter_h;
        break;
      }

      // optional int32 filter_h = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filter_h_)));
          set_has_filter_h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_filter_w;
        break;
      }

      // optional int32 filter_w = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filter_w_)));
          set_has_filter_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_stride_h;
        break;
      }

      // optional int32 stride_h = 5 [default = 1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stride_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stride_h_)));
          set_has_stride_h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_stride_w;
        break;
      }

      // optional int32 stride_w = 6 [default = 1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stride_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stride_w_)));
          set_has_stride_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pad_h;
        break;
      }

      // optional int32 pad_h = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pad_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_h_)));
          set_has_pad_h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pad_w;
        break;
      }

      // optional int32 pad_w = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pad_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_w_)));
          set_has_pad_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_channels;
        break;
      }

      // optional int32 channels = 9 [default = 1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConvParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 data_h = 1;
  if (has_data_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->data_h(), output);
  }

  // optional int32 data_w = 2;
  if (has_data_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->data_w(), output);
  }

  // optional int32 filter_h = 3;
  if (has_filter_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->filter_h(), output);
  }

  // optional int32 filter_w = 4;
  if (has_filter_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->filter_w(), output);
  }

  // optional int32 stride_h = 5 [default = 1];
  if (has_stride_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->stride_h(), output);
  }

  // optional int32 stride_w = 6 [default = 1];
  if (has_stride_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->stride_w(), output);
  }

  // optional int32 pad_h = 7 [default = 0];
  if (has_pad_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pad_h(), output);
  }

  // optional int32 pad_w = 8 [default = 0];
  if (has_pad_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pad_w(), output);
  }

  // optional int32 channels = 9 [default = 1];
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->channels(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConvParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 data_h = 1;
  if (has_data_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->data_h(), target);
  }

  // optional int32 data_w = 2;
  if (has_data_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->data_w(), target);
  }

  // optional int32 filter_h = 3;
  if (has_filter_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->filter_h(), target);
  }

  // optional int32 filter_w = 4;
  if (has_filter_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->filter_w(), target);
  }

  // optional int32 stride_h = 5 [default = 1];
  if (has_stride_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->stride_h(), target);
  }

  // optional int32 stride_w = 6 [default = 1];
  if (has_stride_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->stride_w(), target);
  }

  // optional int32 pad_h = 7 [default = 0];
  if (has_pad_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pad_h(), target);
  }

  // optional int32 pad_w = 8 [default = 0];
  if (has_pad_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pad_w(), target);
  }

  // optional int32 channels = 9 [default = 1];
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->channels(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConvParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 data_h = 1;
    if (has_data_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_h());
    }

    // optional int32 data_w = 2;
    if (has_data_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_w());
    }

    // optional int32 filter_h = 3;
    if (has_filter_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filter_h());
    }

    // optional int32 filter_w = 4;
    if (has_filter_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filter_w());
    }

    // optional int32 stride_h = 5 [default = 1];
    if (has_stride_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stride_h());
    }

    // optional int32 stride_w = 6 [default = 1];
    if (has_stride_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stride_w());
    }

    // optional int32 pad_h = 7 [default = 0];
    if (has_pad_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pad_h());
    }

    // optional int32 pad_w = 8 [default = 0];
    if (has_pad_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pad_w());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 channels = 9 [default = 1];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConvParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConvParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConvParam::MergeFrom(const ConvParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_h()) {
      set_data_h(from.data_h());
    }
    if (from.has_data_w()) {
      set_data_w(from.data_w());
    }
    if (from.has_filter_h()) {
      set_filter_h(from.filter_h());
    }
    if (from.has_filter_w()) {
      set_filter_w(from.filter_w());
    }
    if (from.has_stride_h()) {
      set_stride_h(from.stride_h());
    }
    if (from.has_stride_w()) {
      set_stride_w(from.stride_w());
    }
    if (from.has_pad_h()) {
      set_pad_h(from.pad_h());
    }
    if (from.has_pad_w()) {
      set_pad_w(from.pad_w());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_channels()) {
      set_channels(from.channels());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConvParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvParam::CopyFrom(const ConvParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvParam::IsInitialized() const {

  return true;
}

void ConvParam::Swap(ConvParam* other) {
  if (other != this) {
    std::swap(data_h_, other->data_h_);
    std::swap(data_w_, other->data_w_);
    std::swap(filter_h_, other->filter_h_);
    std::swap(filter_w_, other->filter_w_);
    std::swap(stride_h_, other->stride_h_);
    std::swap(stride_w_, other->stride_w_);
    std::swap(pad_h_, other->pad_h_);
    std::swap(pad_w_, other->pad_w_);
    std::swap(channels_, other->channels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConvParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConvParam_descriptor_;
  metadata.reflection = ConvParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PoolParam::kDataHFieldNumber;
const int PoolParam::kDataWFieldNumber;
const int PoolParam::kKernelHFieldNumber;
const int PoolParam::kKernelWFieldNumber;
const int PoolParam::kStrideHFieldNumber;
const int PoolParam::kStrideWFieldNumber;
const int PoolParam::kPadHFieldNumber;
const int PoolParam::kPadWFieldNumber;
const int PoolParam::kChannelsFieldNumber;
#endif  // !_MSC_VER

PoolParam::PoolParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PoolParam::InitAsDefaultInstance() {
}

PoolParam::PoolParam(const PoolParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PoolParam::SharedCtor() {
  _cached_size_ = 0;
  data_h_ = 0;
  data_w_ = 0;
  kernel_h_ = 0;
  kernel_w_ = 0;
  stride_h_ = 1;
  stride_w_ = 1;
  pad_h_ = 0;
  pad_w_ = 0;
  channels_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PoolParam::~PoolParam() {
  SharedDtor();
}

void PoolParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PoolParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoolParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoolParam_descriptor_;
}

const PoolParam& PoolParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GET_2eproto();
  return *default_instance_;
}

PoolParam* PoolParam::default_instance_ = NULL;

PoolParam* PoolParam::New() const {
  return new PoolParam;
}

void PoolParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_h_ = 0;
    data_w_ = 0;
    kernel_h_ = 0;
    kernel_w_ = 0;
    stride_h_ = 1;
    stride_w_ = 1;
    pad_h_ = 0;
    pad_w_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    channels_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PoolParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 data_h = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_h_)));
          set_has_data_h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_data_w;
        break;
      }

      // optional int32 data_w = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_w_)));
          set_has_data_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kernel_h;
        break;
      }

      // optional int32 kernel_h = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kernel_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kernel_h_)));
          set_has_kernel_h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kernel_w;
        break;
      }

      // optional int32 kernel_w = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kernel_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kernel_w_)));
          set_has_kernel_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_stride_h;
        break;
      }

      // optional int32 stride_h = 5 [default = 1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stride_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stride_h_)));
          set_has_stride_h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_stride_w;
        break;
      }

      // optional int32 stride_w = 6 [default = 1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stride_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stride_w_)));
          set_has_stride_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pad_h;
        break;
      }

      // optional int32 pad_h = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pad_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_h_)));
          set_has_pad_h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pad_w;
        break;
      }

      // optional int32 pad_w = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pad_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_w_)));
          set_has_pad_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_channels;
        break;
      }

      // optional int32 channels = 9 [default = 1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PoolParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 data_h = 1;
  if (has_data_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->data_h(), output);
  }

  // optional int32 data_w = 2;
  if (has_data_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->data_w(), output);
  }

  // optional int32 kernel_h = 3;
  if (has_kernel_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kernel_h(), output);
  }

  // optional int32 kernel_w = 4;
  if (has_kernel_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->kernel_w(), output);
  }

  // optional int32 stride_h = 5 [default = 1];
  if (has_stride_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->stride_h(), output);
  }

  // optional int32 stride_w = 6 [default = 1];
  if (has_stride_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->stride_w(), output);
  }

  // optional int32 pad_h = 7 [default = 0];
  if (has_pad_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pad_h(), output);
  }

  // optional int32 pad_w = 8 [default = 0];
  if (has_pad_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pad_w(), output);
  }

  // optional int32 channels = 9 [default = 1];
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->channels(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PoolParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 data_h = 1;
  if (has_data_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->data_h(), target);
  }

  // optional int32 data_w = 2;
  if (has_data_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->data_w(), target);
  }

  // optional int32 kernel_h = 3;
  if (has_kernel_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kernel_h(), target);
  }

  // optional int32 kernel_w = 4;
  if (has_kernel_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->kernel_w(), target);
  }

  // optional int32 stride_h = 5 [default = 1];
  if (has_stride_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->stride_h(), target);
  }

  // optional int32 stride_w = 6 [default = 1];
  if (has_stride_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->stride_w(), target);
  }

  // optional int32 pad_h = 7 [default = 0];
  if (has_pad_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pad_h(), target);
  }

  // optional int32 pad_w = 8 [default = 0];
  if (has_pad_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pad_w(), target);
  }

  // optional int32 channels = 9 [default = 1];
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->channels(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PoolParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 data_h = 1;
    if (has_data_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_h());
    }

    // optional int32 data_w = 2;
    if (has_data_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_w());
    }

    // optional int32 kernel_h = 3;
    if (has_kernel_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kernel_h());
    }

    // optional int32 kernel_w = 4;
    if (has_kernel_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kernel_w());
    }

    // optional int32 stride_h = 5 [default = 1];
    if (has_stride_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stride_h());
    }

    // optional int32 stride_w = 6 [default = 1];
    if (has_stride_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stride_w());
    }

    // optional int32 pad_h = 7 [default = 0];
    if (has_pad_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pad_h());
    }

    // optional int32 pad_w = 8 [default = 0];
    if (has_pad_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pad_w());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 channels = 9 [default = 1];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoolParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PoolParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PoolParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PoolParam::MergeFrom(const PoolParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_h()) {
      set_data_h(from.data_h());
    }
    if (from.has_data_w()) {
      set_data_w(from.data_w());
    }
    if (from.has_kernel_h()) {
      set_kernel_h(from.kernel_h());
    }
    if (from.has_kernel_w()) {
      set_kernel_w(from.kernel_w());
    }
    if (from.has_stride_h()) {
      set_stride_h(from.stride_h());
    }
    if (from.has_stride_w()) {
      set_stride_w(from.stride_w());
    }
    if (from.has_pad_h()) {
      set_pad_h(from.pad_h());
    }
    if (from.has_pad_w()) {
      set_pad_w(from.pad_w());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_channels()) {
      set_channels(from.channels());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PoolParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolParam::CopyFrom(const PoolParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolParam::IsInitialized() const {

  return true;
}

void PoolParam::Swap(PoolParam* other) {
  if (other != this) {
    std::swap(data_h_, other->data_h_);
    std::swap(data_w_, other->data_w_);
    std::swap(kernel_h_, other->kernel_h_);
    std::swap(kernel_w_, other->kernel_w_);
    std::swap(stride_h_, other->stride_h_);
    std::swap(stride_w_, other->stride_w_);
    std::swap(pad_h_, other->pad_h_);
    std::swap(pad_w_, other->pad_w_);
    std::swap(channels_, other->channels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PoolParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PoolParam_descriptor_;
  metadata.reflection = PoolParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LRNParam::kChannelsFieldNumber;
#endif  // !_MSC_VER

LRNParam::LRNParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LRNParam::InitAsDefaultInstance() {
}

LRNParam::LRNParam(const LRNParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LRNParam::SharedCtor() {
  _cached_size_ = 0;
  channels_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LRNParam::~LRNParam() {
  SharedDtor();
}

void LRNParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LRNParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LRNParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LRNParam_descriptor_;
}

const LRNParam& LRNParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GET_2eproto();
  return *default_instance_;
}

LRNParam* LRNParam::default_instance_ = NULL;

LRNParam* LRNParam::New() const {
  return new LRNParam;
}

void LRNParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channels_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LRNParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channels = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LRNParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 channels = 1 [default = 0];
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channels(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LRNParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 channels = 1 [default = 0];
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channels(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LRNParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 channels = 1 [default = 0];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LRNParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LRNParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LRNParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LRNParam::MergeFrom(const LRNParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channels()) {
      set_channels(from.channels());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LRNParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LRNParam::CopyFrom(const LRNParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LRNParam::IsInitialized() const {

  return true;
}

void LRNParam::Swap(LRNParam* other) {
  if (other != this) {
    std::swap(channels_, other->channels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LRNParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LRNParam_descriptor_;
  metadata.reflection = LRNParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReLUParam::kHeightFieldNumber;
const int ReLUParam::kWidthFieldNumber;
const int ReLUParam::kChannelsFieldNumber;
#endif  // !_MSC_VER

ReLUParam::ReLUParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReLUParam::InitAsDefaultInstance() {
}

ReLUParam::ReLUParam(const ReLUParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReLUParam::SharedCtor() {
  _cached_size_ = 0;
  height_ = 1;
  width_ = 0;
  channels_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReLUParam::~ReLUParam() {
  SharedDtor();
}

void ReLUParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReLUParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReLUParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReLUParam_descriptor_;
}

const ReLUParam& ReLUParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GET_2eproto();
  return *default_instance_;
}

ReLUParam* ReLUParam::default_instance_ = NULL;

ReLUParam* ReLUParam::New() const {
  return new ReLUParam;
}

void ReLUParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    height_ = 1;
    width_ = 0;
    channels_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReLUParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 height = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // optional int32 width = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channels;
        break;
      }

      // optional int32 channels = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReLUParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 height = 1 [default = 1];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->height(), output);
  }

  // optional int32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 channels = 3 [default = 1];
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channels(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReLUParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 height = 1 [default = 1];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->height(), target);
  }

  // optional int32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional int32 channels = 3 [default = 1];
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channels(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReLUParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 height = 1 [default = 1];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 channels = 3 [default = 1];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReLUParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReLUParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReLUParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReLUParam::MergeFrom(const ReLUParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReLUParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReLUParam::CopyFrom(const ReLUParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReLUParam::IsInitialized() const {

  return true;
}

void ReLUParam::Swap(ReLUParam* other) {
  if (other != this) {
    std::swap(height_, other->height_);
    std::swap(width_, other->width_);
    std::swap(channels_, other->channels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReLUParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReLUParam_descriptor_;
  metadata.reflection = ReLUParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SigmoidParam::kHeightFieldNumber;
const int SigmoidParam::kWidthFieldNumber;
const int SigmoidParam::kChannelsFieldNumber;
#endif  // !_MSC_VER

SigmoidParam::SigmoidParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SigmoidParam::InitAsDefaultInstance() {
}

SigmoidParam::SigmoidParam(const SigmoidParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SigmoidParam::SharedCtor() {
  _cached_size_ = 0;
  height_ = 1;
  width_ = 0;
  channels_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SigmoidParam::~SigmoidParam() {
  SharedDtor();
}

void SigmoidParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SigmoidParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SigmoidParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SigmoidParam_descriptor_;
}

const SigmoidParam& SigmoidParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GET_2eproto();
  return *default_instance_;
}

SigmoidParam* SigmoidParam::default_instance_ = NULL;

SigmoidParam* SigmoidParam::New() const {
  return new SigmoidParam;
}

void SigmoidParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    height_ = 1;
    width_ = 0;
    channels_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SigmoidParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 height = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // optional int32 width = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channels;
        break;
      }

      // optional int32 channels = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SigmoidParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 height = 1 [default = 1];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->height(), output);
  }

  // optional int32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 channels = 3 [default = 1];
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channels(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SigmoidParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 height = 1 [default = 1];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->height(), target);
  }

  // optional int32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional int32 channels = 3 [default = 1];
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channels(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SigmoidParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 height = 1 [default = 1];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 channels = 3 [default = 1];
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SigmoidParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SigmoidParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SigmoidParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SigmoidParam::MergeFrom(const SigmoidParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SigmoidParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigmoidParam::CopyFrom(const SigmoidParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmoidParam::IsInitialized() const {

  return true;
}

void SigmoidParam::Swap(SigmoidParam* other) {
  if (other != this) {
    std::swap(height_, other->height_);
    std::swap(width_, other->width_);
    std::swap(channels_, other->channels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SigmoidParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SigmoidParam_descriptor_;
  metadata.reflection = SigmoidParam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GET

// @@protoc_insertion_point(global_scope)
